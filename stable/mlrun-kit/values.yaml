# We use global values scope to multiplex the docker-registry details to both mlrun and nuclio
global:
  registry:
    url: mustprovide
    secretName: mustprovide

nuclio:
  nameOverride: nuclio
  controller:
    enabled: true
    image:
      tag: 1.5.6-amd64
  dashboard:
    enabled: true
    nodePort: 30060
    image:
      tag: 1.5.6-amd64
  autoscaler:
    enabled: false
  dlx:
    enabled: false
  rbac:
    create: true
    crdAccessMode: cluster
  crd:
    create: true
  platform:
    logger:
      sinks:
        myStdoutLoggerSink:
          kind: stdout
          attributes:
            encoding: console
            timeFieldName: time
            timeFieldEncoding: iso8601
      system:
      - level: debug
        sink: myStdoutLoggerSink
      functions:
      - level: debug
        sink: myStdoutLoggerSink
mlrun:
  nameOverride: mlrun
  nuclio:
    mode: enabled
  rbac:
    create: true
  v3io:
    enabled: false
  api:
    image:
      tag: 0.5.5-rc2
    volumes:
      storageOverride:
        persistentVolumeClaim:
          claimName: mlrun-pvc
  ui:
    service:
      type: NodePort
      nodePort: 30050
    image:
      tag: 0.5.5-rc2

# mlrun persistency resources creation can be disabled if the user would like to provide their own PVC
mlrunPersistency:
  pv:
    create: true
  pvc:
    create: true

jupyterNotebook:
  service:
    nodePort: 30040
  image:
    repository: quay.io/mlrun/jupyter
    tag: 0.5.5-rc2
    pullPolicy: IfNotPresent
  mlrunUIURL: "http://127.0.0.1:30050"

mpi-operator:
  nameOverride: mpi-operator
  crd:
    create: true
  rbac:
    clusterResources:
      create: true
    namespaced:
      create: true
  deployment:
    create: true

## Customize PV spec used for nfs-server provisioner
## ref: https://kubernetes.io/docs/concepts/storage/persistent-volumes/
##
nfsPv:
  create: false
  specOverride: {}

nfs-server-provisioner:
  nameOverride: nfs-server-provisioner
  persistence:
    enabled: false
    storageClass: "mlrun-kit-nfs"
    size: 5Gi
